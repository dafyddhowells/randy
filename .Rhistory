league_pos_changes[[i]] <- form_and_fixture_history %>%
filter(team == prem_teams[i]) %>%
arrange(date) %>%
mutate(points = case_when(
win == 1 ~ 3,
#win == 0 ~ 0,
draw == 1 ~ 1,
#draw == 0 ~ 0
)) %>%
replace_na(list(points = 0)) %>%
group_by(team, season) %>%
mutate(cum_points = cumsum(points),
game = row_number())
}
form_with_past_fixtures_plus_league_pos <- data.table::rbindlist(league_pos_changes,
use.names = TRUE) %>%
ungroup() %>%
arrange(date, season) %>%
group_by(season, game) %>%
mutate(league_pos = dense_rank(desc(cum_points)))
return(form_with_past_fixtures_plus_league_pos)
}
library(data.table)
oin_form_and_fixture_history <- function() {
get_prem_form() %>%
left_join(
get_prem_fixture_history(),
by = c("fixture" = "fixture",
"date" = "date",
"team" = "team",
"home" = "home")) %>%
dplyr::select(-fthg.y, -ftag.y) %>%
rename(fthg = fthg.x, ftag = ftag.x)
}
form_fixture_history_league_position() %>% View()
join_form_and_fixture_history <- function() {
get_prem_form() %>%
left_join(
get_prem_fixture_history(),
by = c("fixture" = "fixture",
"date" = "date",
"team" = "team",
"home" = "home")) %>%
dplyr::select(-fthg.y, -ftag.y) %>%
rename(fthg = fthg.x, ftag = ftag.x)
}
form_fixture_history_league_position() %>% View()
append_seasons <- function(x) {
df_seasons_appended <-
x %>%
mutate(season =
case_when(
date >= dmy('15/08/1992') & date <= dmy('11/05/1993') ~ '1992/1993',
date >= dmy('14/08/1993') & date <= dmy('08/05/1994') ~ '1993/1994',
date >= dmy('20/08/1994') & date <= dmy('14/05/1995') ~ '1994/1995',
date >= dmy('19/08/1995') & date <= dmy('05/05/1996') ~ '1995/1996',
date >= dmy('17/08/1996') & date <= dmy('11/05/1997') ~ '1996/1997',
date >= dmy('09/08/1997') & date <= dmy('10/05/1998') ~ '1997/1998',
date >= dmy('15/08/1998') & date <= dmy('16/05/1999') ~ '1998/1999',
date >= dmy('07/08/1999') & date <= dmy('14/05/2000') ~ '1999/2000',
date >= dmy('19/08/2000') & date <= dmy('19/05/2001') ~ '2000/2001',
date >= dmy('18/08/2001') & date <= dmy('11/05/2002') ~ '2001/2002',
date >= dmy('17/08/2002') & date <= dmy('11/05/2003') ~ '2002/2003',
date >= dmy('16/08/2003') & date <= dmy('15/05/2004') ~ '2003/2004',
date >= dmy('14/08/2004') & date <= dmy('15/05/2005') ~ '2004/2005',
date >= dmy('13/08/2005') & date <= dmy('07/05/2006') ~ '2005/2006',
date >= dmy('19/08/2006') & date <= dmy('13/05/2007') ~ '2006/2007',
date >= dmy('11/08/2007') & date <= dmy('11/05/2008') ~ '2007/2008',
date >= dmy('16/08/2008') & date <= dmy('24/05/2009') ~ '2008/2009',
date >= dmy('15/08/2009') & date <= dmy('09/05/2010') ~ '2009/2010',
date >= dmy('14/08/2010') & date <= dmy('22/05/2001') ~ '2010/2011',
date >= dmy('13/08/2011') & date <= dmy('13/05/2012') ~ '2011/2012',
date >= dmy('18/08/2012') & date <= dmy('19/05/2013') ~ '2012/2013',
date >= dmy('17/08/2013') & date <= dmy('11/05/2014') ~ '2013/2014',
date >= dmy('16/08/2014') & date <= dmy('24/05/2015') ~ '2014/2015',
date >= dmy('08/08/2015') & date <= dmy('17/05/2016') ~ '2015/2016',
date >= dmy('13/08/2016') & date <= dmy('21/05/2017') ~ '2016/2017',
date >= dmy('11/08/2017') & date <= dmy('13/05/2018') ~ '2017/2018',
date >= dmy('10/08/2018') & date <= dmy('12/05/2019') ~ '2018/2019',
date >= dmy('09/08/2019') & date <= dmy('26/07/2020') ~ '2019/2020',
date >= dmy('12/08/2020') & date <= dmy('23/05/2021') ~ '2020/2021',
date >= dmy('13/08/2021') & date <= dmy('22/05/2022') ~ '2021/2022'))
return(df_seasons_appended)
}
form_fixture_history_league_position() %>% View()
get_model_data <- function(x = form_fixture_history_league_position()) {
df <- x %>%
left_join(get_xg_fixture_history(),
by = c("team" = "team",
"date" = "date",
"fixture" = "fixture",
"home" = "home")) %>%
arrange(desc(date))
return(df)
}
get_model_data %>% View()
get_model_data() %>% View()
check(getwd())
check(getwd())
check(getwd())
check(getwd())
library(devtools)
check(getwd())
check(getwd())
check(getwd())
build(getwd())
install.packages("/Users/dafhowells/Documents/randy_0.1.0.tar.gz", repos = NULL, type="source")
library(randy)
document(getwd())
document(getwd())
?document
library(randy)
?get_prem_history()
get_prem_history()
detach("package:randy", unload = TRUE)
library(randy)
get_prem_history()
build(getwd())
document(getwd())
build(getwd())
install.packages("/Users/dafhowells/Documents/randy_0.1.0.tar.gz", repos = NULL, type="source")
library(randy)
?get_prem_history()
get_prem_history()
install()
get_prem_history()
devtools::load_all()
check(getwd())
check(getwd())
check(getwd())
document(getwd())
load("~/Documents/randy/data/prem_2018.rda")
View(prem_2018)
load("~/Documents/randy/data/prem_2018.rda")
document(getwd())
load("~/Documents/randy/data/prem_2018.rda")
document(getwd())
document(getwd())
document(getwd())
document(getwd())
check(getwd())
document(getwd())
document(getwd())
document(getwd())
document(getwd())
warnings()
document(getwd())
document(getwd())
document(getwd())
check(getwd())
document(getwd())
check(getwd())
document(getwd())
check(getwd())
document(getwd())
check(getwd())
build(getwd())
install()
detach("package:randy", unload = TRUE)
library(randy)
?remove.packages("randy")
remove.packages("randy")
install()
library(randy)
remove.packages("randy")
build(getwd())
install()
check(getwd())
document(getwd())
load("prem_2018")
load("~/Documents/randy/data/prem_2018.rda")
View(prem_2018)
library(devtools)
check(getwd())
document(getwd())
check(getwd())
document(getwd())
check(getwd())
document(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
check(getwd())
usethis::use_mit_license()
check(getwd())
build(getwd())
install()
install.packages("tidyverse")
install.packages(c(
"RcppRoll",
"rio",
"janitor",
"data.table"))
install.packages("Rtools")
library(rio)
install_formats()
library(janitor)
library(RcppRoll)
library(data.table)
check(getwd())
install.packages("devtools")
library(devtools)
check(getwd())
check(getwd())
library(devtools)
check(getwd())
install.packages("qpdf")
check(getwd())
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
qpdf
check(getwd())
library(devtools)
?use_github_actions()
use_github_actions(getwd())
use_github_actions()
use_testthat(getwd())
use_testthat(getwd())
getwd()
use_testthat("randy")
library(understatr)
get_team_players_stats(team_name = "Newcastle United", year = 2018)
get_player_matches_stats(813)
View(get_player_matches_stats(813))
View(get_match_stats(16619))
use_testthat(getwd())
getwd()
devtools::install_github("dafyddhowells/randy")
library(randy)
load("~/randy/data/prem_2018.rda")
check(getwd())
library(usethis)
check(getwd())
library(devtools)
check(getwd())
getwd()
library(dplyr)
library(lubridate
library(RcppRoll
library(rvest
library(magrittr)
library(data.table)
get_xg_fixture_history <- function(home_scored_games_lag = 4,
home_conceded_games_lag = 4,
away_scored_games_lag = 4,
away_conceded_games_lag = 4){
# Create a vector and then loop through each to create a table
xg_seasons_l <- list()
# Consider downloading these as files to host these
xg_season_url <- c("https://fbref.com/en/comps/9/1631/schedule/2017-2018-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/1889/schedule/2018-2019-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/3232/schedule/2019-2020-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/10728/schedule/2020-2021-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/schedule/Premier-League-Scores-and-Fixtures")
for(i in 1:length(xg_season_url)){
x <- read_html(xg_season_url[i])
xg_seasons_l[i] <- html_nodes(x, "table") %>% html_table(fill = TRUE)
}
library(dplyr)
library(lubridate
library(RcppRoll
library(rvest
library(magrittr)
library(data.table)
get_xg_fixture_history <- function(home_scored_games_lag = 4,
home_conceded_games_lag = 4,
away_scored_games_lag = 4,
away_conceded_games_lag = 4){
# Create a vector and then loop through each to create a table
xg_seasons_l <- list()
# Consider downloading these as files to host these
xg_season_url <- c("https://fbref.com/en/comps/9/1631/schedule/2017-2018-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/1889/schedule/2018-2019-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/3232/schedule/2019-2020-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/10728/schedule/2020-2021-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/schedule/Premier-League-Scores-and-Fixtures")
for(i in 1:length(xg_season_url)){
x <- read_html(xg_season_url[i])
xg_seasons_l[i] <- html_nodes(x, "table") %>% html_table(fill = TRUE)
}
# As we are joining on fixture we need to tidy up the team names so they
#   are consistent with what we see in the source history tables
xg_seasons <- rbindlist(xg_seasons_l, use.names = TRUE) %>%
select(date = .data$Date,
home_team = .data$Home,
away_team = .data$Away,
actual_score = .data$Score,
xg1 = 6,
xg2 = 8) %>%
mutate(home_team1 = case_when(
home_team == "Leicester City" ~ "Leicester",
home_team == "Manchester Utd" ~ "Man Utd",
home_team == "Leeds United" ~ "Leeds",
home_team == "Manchester City" ~ "Man City",
home_team == "Swansea City" ~ "Swansea",
home_team == "Cardiff City" ~ "Cardiff ",
home_team == "Norwich City" ~ "Norwich",
home_team == "Newcastle Utd" ~ "Newcastle",
home_team == "Sheffield Utd" ~ "Sheffield United",
home_team == "Stoke City" ~ "Stoke",
home_team == "Tottenham" ~ "Spurs")) %>%
mutate(home_team = ifelse(is.na(.data$home_team1), .data$home_team, .data$home_team1)) %>%
mutate(away_team1 = case_when(
away_team == "Leicester City" ~ "Leicester",
away_team == "Manchester Utd" ~ "Man Utd",
away_team == "Leeds United" ~ "Leeds",
away_team == "Manchester City" ~ "Man City",
away_team == "Swansea City" ~ "Swansea",
away_team == "Cardiff City" ~ "Cardiff ",
away_team == "Norwich City" ~ "Norwich",
away_team == "Newcastle Utd" ~ "Newcastle",
away_team == "Sheffield Utd" ~ "Sheffield United",
away_team == "Stoke City" ~ "Stoke",
away_team == "Tottenham" ~ "Spurs")) %>%
mutate(away_team = ifelse(is.na(.data$away_team1), .data$away_team, .data$away_team1)) %>%
mutate(fixture = paste0(.data$home_team,
" v ",
.data$away_team))
xg_seasons_home <- xg_seasons %>%
mutate(team = .data$home_team,
home = TRUE) %>%
select(.data$date,
.data$team,
.data$fixture,
.data$actual_score,
.data$xg1,
.data$xg2,
.data$home) %>% drop_na() %>%
arrange(.data$team, .data$date) %>%
distinct()
xg_seasons_away <- xg_seasons %>%
mutate(team = .data$away_team,
home = FALSE) %>%
select(.data$date,
.data$team,
.data$fixture,
.data$actual_score,
.data$xg1,
.data$xg2,
.data$home) %>% drop_na() %>%
arrange(.data$team, .data$date) %>%
distinct()
xg_seasons_home_roll_xg <-
# Home XG FOR and AGAINST
cbind(xg_seasons_home,
xg_for = xg_seasons_home  %>%
pull(.data$xg1) %>%
roll_mean(n = home_scored_games_lag, align = "right", fill = 0),
xg_against = xg_seasons_home  %>%
pull(.data$xg2) %>%
roll_mean(n = home_conceded_games_lag, align = "right", fill = 0))
xg_seasons_away_roll_xg <-
# Away XG FOR and AGAINST
cbind(xg_seasons_away,
xg_for = xg_seasons_away  %>%
pull(.data$xg2) %>%
roll_mean(n = away_scored_games_lag, align = "right", fill = 0),
xg_against = xg_seasons_away  %>%
pull(.data$xg1) %>%
roll_mean(n = away_conceded_games_lag, align = "right", fill = 0))
xg_seasons_home_away <- rbind(xg_seasons_home_roll_xg,
xg_seasons_away_roll_xg) %>%
mutate(date = ymd(.data$date))
return(xg_seasons_home_away)
}
get_xg_fixture_history()
library(dplyr)
library(lubridate)
library(RcppRoll)
library(rvest)
library(magrittr)
library(data.table)
get_xg_fixture_history <- function(home_scored_games_lag = 4,
home_conceded_games_lag = 4,
away_scored_games_lag = 4,
away_conceded_games_lag = 4){
# Create a vector and then loop through each to create a table
xg_seasons_l <- list()
# Consider downloading these as files to host these
xg_season_url <- c("https://fbref.com/en/comps/9/1631/schedule/2017-2018-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/1889/schedule/2018-2019-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/3232/schedule/2019-2020-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/10728/schedule/2020-2021-Premier-League-Scores-and-Fixtures",
"https://fbref.com/en/comps/9/schedule/Premier-League-Scores-and-Fixtures")
for(i in 1:length(xg_season_url)){
x <- read_html(xg_season_url[i])
xg_seasons_l[i] <- html_nodes(x, "table") %>% html_table(fill = TRUE)
}
# As we are joining on fixture we need to tidy up the team names so they
#   are consistent with what we see in the source history tables
xg_seasons <- rbindlist(xg_seasons_l, use.names = TRUE) %>%
select(date = .data$Date,
home_team = .data$Home,
away_team = .data$Away,
actual_score = .data$Score,
xg1 = 6,
xg2 = 8) %>%
mutate(home_team1 = case_when(
home_team == "Leicester City" ~ "Leicester",
home_team == "Manchester Utd" ~ "Man Utd",
home_team == "Leeds United" ~ "Leeds",
home_team == "Manchester City" ~ "Man City",
home_team == "Swansea City" ~ "Swansea",
home_team == "Cardiff City" ~ "Cardiff ",
home_team == "Norwich City" ~ "Norwich",
home_team == "Newcastle Utd" ~ "Newcastle",
home_team == "Sheffield Utd" ~ "Sheffield United",
home_team == "Stoke City" ~ "Stoke",
home_team == "Tottenham" ~ "Spurs")) %>%
mutate(home_team = ifelse(is.na(.data$home_team1), .data$home_team, .data$home_team1)) %>%
mutate(away_team1 = case_when(
away_team == "Leicester City" ~ "Leicester",
away_team == "Manchester Utd" ~ "Man Utd",
away_team == "Leeds United" ~ "Leeds",
away_team == "Manchester City" ~ "Man City",
away_team == "Swansea City" ~ "Swansea",
away_team == "Cardiff City" ~ "Cardiff ",
away_team == "Norwich City" ~ "Norwich",
away_team == "Newcastle Utd" ~ "Newcastle",
away_team == "Sheffield Utd" ~ "Sheffield United",
away_team == "Stoke City" ~ "Stoke",
away_team == "Tottenham" ~ "Spurs")) %>%
mutate(away_team = ifelse(is.na(.data$away_team1), .data$away_team, .data$away_team1)) %>%
mutate(fixture = paste0(.data$home_team,
" v ",
.data$away_team))
xg_seasons_home <- xg_seasons %>%
mutate(team = .data$home_team,
home = TRUE) %>%
select(.data$date,
.data$team,
.data$fixture,
.data$actual_score,
.data$xg1,
.data$xg2,
.data$home) %>% drop_na() %>%
arrange(.data$team, .data$date) %>%
distinct()
xg_seasons_away <- xg_seasons %>%
mutate(team = .data$away_team,
home = FALSE) %>%
select(.data$date,
.data$team,
.data$fixture,
.data$actual_score,
.data$xg1,
.data$xg2,
.data$home) %>% drop_na() %>%
arrange(.data$team, .data$date) %>%
distinct()
xg_seasons_home_roll_xg <-
# Home XG FOR and AGAINST
cbind(xg_seasons_home,
xg_for = xg_seasons_home  %>%
pull(.data$xg1) %>%
roll_mean(n = home_scored_games_lag, align = "right", fill = 0),
xg_against = xg_seasons_home  %>%
pull(.data$xg2) %>%
roll_mean(n = home_conceded_games_lag, align = "right", fill = 0))
xg_seasons_away_roll_xg <-
# Away XG FOR and AGAINST
cbind(xg_seasons_away,
xg_for = xg_seasons_away  %>%
pull(.data$xg2) %>%
roll_mean(n = away_scored_games_lag, align = "right", fill = 0),
xg_against = xg_seasons_away  %>%
pull(.data$xg1) %>%
roll_mean(n = away_conceded_games_lag, align = "right", fill = 0))
xg_seasons_home_away <- rbind(xg_seasons_home_roll_xg,
xg_seasons_away_roll_xg) %>%
mutate(date = ymd(.data$date))
return(xg_seasons_home_away)
}
get_xg_fixture_history()
library(tidyr)
get_xg_fixture_history()
xg_test <- get_xg_fixture_history()
View(xg_test)
devtools:build()
devtools::build()
devtools::check()
View(prem_2018)
prem_2021
utils::globalVariables("prem_2021")
utils::globalVariables()
devtools::check()
rlang::.data
load("~/R Docs/randy/.RData")
load("~/R Docs/randy/.RData")
usethis::use_data(prem_2021)
usethis::use_data(prem_2021, overwrite = TRUE)
usethis::use_data(internal = TRUE)
usethis::use_data(prem_2021, internal = TRUE)
usethis::edit_r_environ()
utils::globalVariables("prem_2021")
devtools::check()
library(understatr)
get_match_stats(match_id = 11662)
get_match_shots(match_id = 11662)
get_team_meta("Arsenal")
devtools::build()
pwd
pwd()
wd
